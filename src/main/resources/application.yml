#------------------通用配置------------------
spring:
  application:
    #应用名称
    name: zx-picture-backend
  profiles:
    active: dev
  servlet:
    multipart:
      #上传文件大小限制
      max-file-size: 50MB
      #请求文件最大限制
      max-request-size: 10MB
  flyway:
    #是否开启数据库迁移
    enabled: false

server:
  #端口号
  port: 8123

  servlet:
    #指定上下文路径 也就是说 要输入localhost:8080/api 才能访问到
    context-path: /api
    session:
      cookie:
        #session过期时间10天
        max-age: 864000

--- #------------------数据库配置------------------
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/zx_picture?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
    username: root
    password: 123456

  # 空间图片分表
  shardingsphere:
    datasource:
      names: zx_picture
      zx_picture:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/zx_picture
        username: root
        password: 123456
    rules:
      sharding:
        tables:
          picture:
            actual-data-nodes: zx_picture.tb_picture
            #动态分表 actual-data-nodes 一般情况下是指定一段分表的范围，zx_picture.tb_picture${}
            #但是由于 spaceId 是长整型，范围太大，无法通过指定范围将所有分表名称包含 这里我们需要自行设置分表名称
            table-strategy:
              standard:
                #根据什么进行分表 分表字段
                sharding-column: spaceId
                # 使用自定义分片算法
                sharding-algorithm-name: picture_sharding_algorithm
        sharding-algorithms:
          picture_sharding_algorithm:
            #自行实现分表class类
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.katomegumi.zxpicturebackend.manager.sharding.PictureShardingAlgorithm
    props:
      #日志打印
      sql-show: true

--- #------------------中间件配置------------------
spring:
  #redis配置
  redis:
    host: 192.168.88.130
    port: 6379
    database: 1
    #设置连接时间 5秒后失败
    timeout: 5000
    password: 123456

mybatis-plus:
  # mapper 文件位置
  mapper-locations: classpath:/mapper/*.xml

  configuration:
    # MyBatis 配置 开启驼峰转下划线
    map-underscore-to-camel-case: true
    #仅在开发环境打印日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

  global-config:
    enable-sql-runner: true
    db-config:
      logic-delete-field: isDelete
      # 默认 1 代表删除
      logic-delete-value: 1
      #默认 0 代表存在
      logic-not-delete-value: 0
      #数据库字段下划线命名
      table-underline: true

    # 关闭 mybatis-plus 启动打印的 banner
    banner: false

--- #---------------------接口文档配置--------------------
knife4j:
  enable: false
  openapi:
    title: 协同云图库接口文档
    description: "协同云图库"
    concat: zx
    version: v1.0
    group:
      test1:
        group-name: 分组名称
        api-rule: package
        api-rule-resources:
          - com.katomegumi.zxpicturebackend.controller

--- #------------------邮箱配置------------------
#邮箱服务器
spring:
  mail:
    # 邮箱服务器地址
    host: smtp.qq.com
    nickname: 惠眸图界
    #邮箱号
    username: xx@foxmail.com
    #授权码
    password: x
    port: 465
    protocol: smtp
    #编码类型
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          socketFactory:
            port: 465
            class: javax.net.ssl.SSLSocketFactory
            fallback: false

--- #------------------自定义配置------------------
# 对象存储服务 腾讯云
cos:
  client:
    secret-id: x
    secret-key: x
    bucket: x
    host: x
    region: x

# 阿里云 AI 配置
aliYunAi:
  secret-key: x

# 指定验证码内容
verify:
  code:
    length: 6
